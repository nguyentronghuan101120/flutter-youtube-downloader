# Flutter Project Guidelines

## App Information

- **Package ID**: `com.flutteryoutubedownloader.app`
- **Architecture**: Clean Architecture
- **State Management**: Cubit (via `flutter_bloc`)
- **Flutter SDK**: 3.32.5

## Documentation

- Detailed specification: `docs/srs.md`
- App workflow: `docs/app-workflow.md`

## Dependencies

> Do not add any dependencies without approval.

| Package      | Version | Note                 |
| ------------ | ------- | -------------------- |
| intl         | 0.20.2  |                      |
| flutter_bloc | 9.1.1   | Required             |
| get_it       | 8.0.3   | Dependency Injection |
| mockito      | 5.4.6   | For testing only     |

---

## Naming Conventions

| Element           | Format           | Example                 |
| ----------------- | ---------------- | ----------------------- |
| Class             | PascalCase       | `UserRepository`        |
| Variable/Function | camelCase        | `loadUserData()`        |
| File/Folder       | snake_case       | `user_repository.dart`  |
| Environment Var   | UPPER_CASE       | `API_KEY`               |
| Boolean Variable  | Verb-prefixed    | `isValid`, `hasData`    |
| Function Naming   | Starts with verb | `fetchData`, `saveUser` |

Common abbreviations allowed:

- `API`, `URL`, `DB`, `ID`
- `i`, `j` for loops
- `ctx` for context
- `req`, `res`, `next` for middlewares
- `err` for error

---

## General Dart Guidelines

### Basics

- Use English for all code (identifiers, values).
- Use Vietnamese for all documentation and comments.
- Always explicitly declare data types.
- Do not use `any`.
- Avoid blank lines within functions.
- Only export one item per file.

### Functions

- Each function should do only one thing.
- Prefer functions under 20 instructions.
- Use verbs in function names.
- Use `isX`, `hasX`, `canX` for booleans.
- Use `executeX`, `loadX`, `saveX` for void-returning functions.
- Prefer early returns to avoid deep nesting.
- Extract logic into utility functions when needed.
- Use higher-order functions (`map`, `filter`, `reduce`) where applicable.
- Use arrow functions for simple logic (under 3 lines).
- Use named functions otherwise.
- Prefer default parameter values over null checks.
- Minimize parameter count using RO-RO:
  - Request Object for inputs
  - Response Object for outputs
- Maintain a single level of abstraction per function.

### Data Handling

- Avoid primitive types for complex structures; use custom classes.
- Prefer encapsulation and internal validation in models.
- Use immutability where possible:
  - `final`, `const`, `as const`

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Use interfaces for defining contracts.
- Keep class size reasonable:
  - Under 200 lines of logic
  - Under 10 public methods
  - Under 10 properties

---

## Error Handling

- Use exceptions only for unexpected errors.
- Catch exceptions to:
  - Fix known issues
  - Add context
  - Otherwise, allow the global handler to handle it

---

## Testing Guidelines

### Unit Testing

- Follow **Arrange → Act → Assert** format.
- Name test variables clearly:
  - `mockX`, `inputX`, `actualX`, `expectedX`
- Unit test every public method.
- Use mocks for dependencies, unless:
  - Dependency is external and lightweight

### Acceptance Testing

- Use **Given → When → Then** format.

---

## File & Code Size Limits

- Widget page files must not exceed **500 lines**.
- Regular Dart files must not exceed **400 lines**.
- Each method should stay within **30 lines of logic** (excluding comments/blank lines).
- Combine `data_source` and `data_source_impl` into a single file.

---

## Strict Prohibitions and Enforcements

- Do **not** use `withOpacity(x)`  
  → Replace with `withValues(alpha: x)`
- Do **not** use `AppLocalizations.of(context)!`  
  → Use `AppLocalizations.of(context)`
- Do **not** hardcode any text  
  → Use localization keys
- Do **not** pass `BuildContext` to a Cubit
- Cubit must not include any UI or navigation logic
- All UI and navigation logic must reside in Widgets
- Do **not** use `print()` for debugging  
  → Use `debugPrint()` if needed
- Must support multilingual (vi, en, ja, ko)
- Always use `CommonErrorWidget` for error states

---

## Responsive Design Rules

- All responsive logic must be centralized via `ResponsiveManager` in `core/utils`
- MediaQuery or hardcoded sizes **must not** be used directly
- Handle:
  - Screen classification (mobile, tablet)
  - Width/height scaling
  - Font sizing
  - Padding and layout decisions

---

If you need this file in `.yaml` or embedded into CI, localization, or linter config, feel free to request an export.
