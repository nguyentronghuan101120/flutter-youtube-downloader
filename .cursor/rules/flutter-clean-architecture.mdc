# 🏗️ Flutter Clean Architecture Rules

## 🚨 Quy tắc nghiêm ngặt

### 1. **KHÔNG truy cập Service từ Cubit/Bloc**

```dart
// ❌ VI PHẠM
class VideoAnalysisCubit extends Cubit<VideoAnalysisState> {
  final YouTubeService _youtubeService; // ❌ Truy cập trực tiếp service
```

```dart
// ✅ ĐÚNG
class VideoAnalysisCubit extends Cubit<VideoAnalysisState> {
  final AnalyzeVideo _analyzeVideo; // ✅ Sử dụng usecase
```

### 2. **Entity BẮT BUỘC sử dụng Freezed**

```dart
// ✅ ĐÚNG
@freezed
class VideoInfo with _$VideoInfo {
  const factory VideoInfo({
    required String id,
    required String title,
    required String author,
    required Duration duration,
  }) = _VideoInfo;

  factory VideoInfo.fromJson(Map<String, dynamic> json) =>
      _$VideoInfoFromJson(json);
}
```

### 3. **Model sử dụng typedef hoặc kế thừa Entity**

```dart
// ✅ ĐÚNG - Typedef cho simple mapping
typedef PlaylistInfoModel = PlaylistInfo;

// ✅ ĐÚNG - Kế thừa cho complex mapping
class UserModel extends User {
  const UserModel({required super.id, required super.name});
  factory UserModel.fromMap(Map<String, dynamic> map) => UserModel(...);
}
```

### 4. **Repository trả về trực tiếp từ DataSource**

```dart
// ✅ ĐÚNG
@LazySingleton(as: DownloadRepository)
class DownloadRepositoryImpl implements DownloadRepository {
  final DownloadDataSource _dataSource;

  @override
  Future<Result<DownloadTask>> startDownload(StartDownloadParams params) async {
    try {
      final task = await _dataSource.startDownload(params);
      return Result.success(task);
    } catch (e) {
      return Result.failure('Failed to start download: $e');
    }
  }
}
```

### 5. **Sử dụng Result Pattern**

```dart
// ✅ ĐÚNG
Future<Result<VideoInfo>> analyzeVideo(String url) async {
  try {
    final videoInfo = await _dataSource.analyzeVideo(url);
    return Result.success(videoInfo);
  } catch (e) {
    return Result.failure('Failed to analyze video: $e');
  }
}
```

### 6. **Injectable Annotation**

```dart
// ✅ ĐÚNG - UseCase
@injectable
class AnalyzeVideo {
  final VideoRepository _repository;
  AnalyzeVideo({required VideoRepository repository}) : _repository = repository;
}

// ✅ ĐÚNG - Repository
@LazySingleton(as: VideoRepository)
class VideoRepositoryImpl implements VideoRepository {
  final VideoDataSource _dataSource;
  VideoRepositoryImpl({required VideoDataSource dataSource}) : _dataSource = dataSource;
}

// ✅ ĐÚNG - Service
@lazySingleton
class YouTubeService {
  // Implementation
}

// ✅ ĐÚNG - Cubit
@injectable
class VideoAnalysisCubit extends Cubit<VideoAnalysisState> {
  final AnalyzeVideo _analyzeVideo;
  VideoAnalysisCubit({required AnalyzeVideo analyzeVideo}) : _analyzeVideo = analyzeVideo;
}
```

## 📋 Cấu trúc thư mục

```
lib/
├── core/                           # Shared components
│   ├── constants/                  # App constants
│   ├── error/                      # Error handling
│   ├── utils/                      # Helper functions
│   ├── services/                   # Platform services
│   ├── result/                     # Result type
│   └── dependency_injection/       # DI setup
│
├── domain/                         # Business logic
│   ├── entities/                   # Business entities (BẮT BUỘC Freezed)
│   ├── repositories/               # Repository interfaces
│   ├── usecases/                   # Business use cases
│   └── value_objects/              # Value objects
│
├── data/                           # External data sources
│   ├── models/                     # Data models (typedef hoặc kế thừa entities)
│   ├── datasources/                # Data sources
│   └── repositories/               # Repository implementations
│
└── presentation/                   # UI
    ├── bloc/                       # State management (Cubit/Bloc)
    ├── pages/                      # Page widgets
    ├── widgets/                    # Reusable widgets
    └── theme/                      # Theme configuration
```

## 🔄 Dependency Flow

```
Presentation Layer → Domain Layer ← Data Layer
       ↓                    ↑              ↑
   UI Components    Business Logic   External Data
```

## 📝 Quy trình tạo feature

### Bước 1: Domain Layer

1. Tạo Entity **VỚI FREEDZED** (bắt buộc)
2. Tạo Repository interface
3. Tạo UseCase

### Bước 2: Data Layer

1. Tạo Model (typedef hoặc kế thừa Entity)
2. Tạo DataSource
3. Tạo Repository implementation

### Bước 3: Presentation Layer

1. Tạo Cubit/Bloc
2. Tạo UI components
3. Tạo Pages

### Bước 4: Dependency Injection

1. Đăng ký dependencies
2. Chạy `flutter pub run build_runner build --delete-conflicting-outputs`

## 🔍 Code Review Checklist

- [ ] **Domain layer không phụ thuộc framework**
- [ ] **Entity BẮT BUỘC sử dụng Freezed**
- [ ] **Cubit chỉ sử dụng UseCases**
- [ ] **Model sử dụng typedef hoặc kế thừa Entity**
- [ ] **Repository trả về trực tiếp từ DataSource**
- [ ] **Sử dụng Result pattern cho error handling**
- [ ] **Injectable annotation đúng cách**
- [ ] **Dependency injection đã đăng ký đầy đủ**
- [ ] **Import đúng layer**
- [ ] **Sử dụng developer.log thay vì print/debugPrint**

## 🔧 Logging Rules

```dart
// ❌ VI PHẠM
print('Download started');
debugPrint('Download progress: $progress');

// ✅ ĐÚNG
import 'dart:developer' as developer;
developer.log('[file_name.dart] - Download started');
developer.log('[file_name.dart] - Download progress: $progress');
```

## 🎯 Injectable Rules

### Áp dụng annotation

- **UseCase:** `@injectable`
- **Repository:** `@LazySingleton(as: XxxRepository)`
- **DataSource:** `@lazySingleton`
- **Service:** `@lazySingleton`
- **Cubit:** `@injectable`

### Không áp dụng

- **Entity:** Lớp dữ liệu thuần với Freezed
- **Model:** Typedef hoặc kế thừa entity
- **Constant:** Static fields
- **Widget/Page:** UI components

## 📚 References

- [lib/domain/entities/](mdc:lib/domain/entities/) - Business entities
- [lib/domain/repositories/](mdc:lib/domain/repositories/) - Repository interfaces
- [lib/domain/usecases/](mdc:lib/domain/usecases/) - Business use cases
- [lib/data/models/](mdc:lib/data/models/) - Data models
- [lib/presentation/bloc/](mdc:lib/presentation/bloc/) - State management
