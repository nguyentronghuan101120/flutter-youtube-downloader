import 'package:freezed_annotation/freezed_annotation.dart';

part 'video_info.freezed.dart';
part 'video_info.g.dart';

@freezed
class VideoInfo with _$VideoInfo {
  const factory VideoInfo({
    required String id,
    required String title,
    required String author,
    required Duration duration,
    required String thumbnailUrl,
    required String description,
    required DateTime uploadDate,
    required int viewCount,
    required List<String> tags,
    required String url,
  }) = _VideoInfo;

  factory VideoInfo.fromJson(Map<String, dynamic> json) =>
      _$VideoInfoFromJson(json);
}

@freezed
class VideoStream with _$VideoStream {
  const factory VideoStream({
    required String url,
    required String format,
    required String quality,
    required int width,
    required int height,
    required int bitrate,
    required int fileSize,
    required String codec,
  }) = _VideoStream;

  factory VideoStream.fromJson(Map<String, dynamic> json) =>
      _$VideoStreamFromJson(json);
}

@freezed
class AudioStream with _$AudioStream {
  const factory AudioStream({
    required String url,
    required String format,
    required int bitrate,
    required int fileSize,
    required String codec,
  }) = _AudioStream;

  factory AudioStream.fromJson(Map<String, dynamic> json) =>
      _$AudioStreamFromJson(json);
}

@freezed
class SubtitleInfo with _$SubtitleInfo {
  const factory SubtitleInfo({
    required String languageCode,
    required String languageName,
    required String url,
    @Default(false) bool isAutoGenerated,
  }) = _SubtitleInfo;

  factory SubtitleInfo.fromJson(Map<String, dynamic> json) =>
      _$SubtitleInfoFromJson(json);
}

// Extension để giữ lại các static methods
extension VideoInfoUtils on VideoInfo {
  /// Validates if the provided URL is a valid YouTube video URL
  static bool isValidVideoUrl(String url) {
    final youtubeVideoPattern = RegExp(
      r'^(https?://)?(www\.)?(youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)[a-zA-Z0-9_-]{11}.*$',
      caseSensitive: false,
    );
    return youtubeVideoPattern.hasMatch(url);
  }

  /// Extracts video ID from YouTube URL
  static String? extractVideoId(String url) {
    final patterns = [
      RegExp(
        r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})',
      ),
    ];

    for (final pattern in patterns) {
      final match = pattern.firstMatch(url);
      if (match != null) {
        return match.group(1);
      }
    }
    return null;
  }
}
