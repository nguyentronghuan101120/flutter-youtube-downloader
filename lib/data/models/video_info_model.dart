import '../../domain/entities/video_info.dart';

class VideoInfoModel extends VideoInfo {
  const VideoInfoModel({
    required super.id,
    required super.title,
    required super.description,
    required super.duration,
    required super.channelName,
    required super.channelId,
    required super.thumbnailUrl,
    super.uploadDate,
    super.viewCount,
    super.likeCount,
    required super.videoStreams,
    required super.audioStreams,
    required super.subtitles,
    super.isPrivate,
    super.isAgeRestricted,
    super.isRegionBlocked,
  });

  factory VideoInfoModel.fromMap(Map<String, dynamic> map) {
    return VideoInfoModel(
      id: map['id'] ?? '',
      title: map['title'] ?? '',
      description: map['description'] ?? '',
      duration: Duration(seconds: map['duration'] ?? 0),
      channelName: map['channelName'] ?? '',
      channelId: map['channelId'] ?? '',
      thumbnailUrl: map['thumbnailUrl'] ?? '',
      uploadDate: map['uploadDate'],
      viewCount: map['viewCount'],
      likeCount: map['likeCount'],
      videoStreams: List<VideoStreamModel>.from(
        map['videoStreams']?.map((x) => VideoStreamModel.fromMap(x)) ?? [],
      ),
      audioStreams: List<AudioStreamModel>.from(
        map['audioStreams']?.map((x) => AudioStreamModel.fromMap(x)) ?? [],
      ),
      subtitles: List<SubtitleInfoModel>.from(
        map['subtitles']?.map((x) => SubtitleInfoModel.fromMap(x)) ?? [],
      ),
      isPrivate: map['isPrivate'] ?? false,
      isAgeRestricted: map['isAgeRestricted'] ?? false,
      isRegionBlocked: map['isRegionBlocked'] ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'duration': duration.inSeconds,
      'channelName': channelName,
      'channelId': channelId,
      'thumbnailUrl': thumbnailUrl,
      'uploadDate': uploadDate,
      'viewCount': viewCount,
      'likeCount': likeCount,
      'videoStreams': videoStreams
          .map((x) => (x as VideoStreamModel).toMap())
          .toList(),
      'audioStreams': audioStreams
          .map((x) => (x as AudioStreamModel).toMap())
          .toList(),
      'subtitles': subtitles
          .map((x) => (x as SubtitleInfoModel).toMap())
          .toList(),
      'isPrivate': isPrivate,
      'isAgeRestricted': isAgeRestricted,
      'isRegionBlocked': isRegionBlocked,
    };
  }
}

class VideoStreamModel extends VideoStream {
  const VideoStreamModel({
    required super.url,
    required super.format,
    required super.quality,
    required super.width,
    required super.height,
    required super.bitrate,
    required super.fileSize,
    required super.codec,
  });

  factory VideoStreamModel.fromMap(Map<String, dynamic> map) {
    return VideoStreamModel(
      url: map['url'] ?? '',
      format: map['format'] ?? '',
      quality: map['quality'] ?? '',
      width: map['width'] ?? 0,
      height: map['height'] ?? 0,
      bitrate: map['bitrate'] ?? 0,
      fileSize: map['fileSize'] ?? 0,
      codec: map['codec'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'url': url,
      'format': format,
      'quality': quality,
      'width': width,
      'height': height,
      'bitrate': bitrate,
      'fileSize': fileSize,
      'codec': codec,
    };
  }
}

class AudioStreamModel extends AudioStream {
  const AudioStreamModel({
    required super.url,
    required super.format,
    required super.bitrate,
    required super.fileSize,
    required super.codec,
  });

  factory AudioStreamModel.fromMap(Map<String, dynamic> map) {
    return AudioStreamModel(
      url: map['url'] ?? '',
      format: map['format'] ?? '',
      bitrate: map['bitrate'] ?? 0,
      fileSize: map['fileSize'] ?? 0,
      codec: map['codec'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'url': url,
      'format': format,
      'bitrate': bitrate,
      'fileSize': fileSize,
      'codec': codec,
    };
  }
}

class SubtitleInfoModel extends SubtitleInfo {
  const SubtitleInfoModel({
    required super.languageCode,
    required super.languageName,
    required super.url,
    super.isAutoGenerated,
  });

  factory SubtitleInfoModel.fromMap(Map<String, dynamic> map) {
    return SubtitleInfoModel(
      languageCode: map['languageCode'] ?? '',
      languageName: map['languageName'] ?? '',
      url: map['url'] ?? '',
      isAutoGenerated: map['isAutoGenerated'] ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'languageCode': languageCode,
      'languageName': languageName,
      'url': url,
      'isAutoGenerated': isAutoGenerated,
    };
  }
}
